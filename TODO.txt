Sanitize
    Refactor binary deserialization tests
        serialize_binary_value(), get_binary_value_size() instead of global serialize for floats and times
        Move serialization tests to just binary serialization tests
        Verify that deserialization test fixture works
        Add float, double, times error tests in serialization.cpp
        Refactor binary deserialization constants
        Change text row to use parameterized tests
        Refactor deserialize_binary_value to have similar implementation to the text one
	See if we have any trouble with user input in binary serialization: make assertions
	Test with an unknown protocol type
    Test zero dates
	Random input tests
Better docs
    Wandbox
	Breaking up the tutorial in pieces
	Explaining the different overloads and async methods available
	Try to include Readme instead of copying it
	BoostBook
	Automate the process
	Make undocumented enum values show (for collation)
Multiresultset
	Text protocol
	Binary protocol (stored procedures)
Handshake
	compression
	SSL certificate & common name validation
	sha256_password
Usability
	Should make_error_code be public?
	Incomplete query reads: how does this affect further queries?
	Metadata in rows: being able to index by name
	Iterators for sync resultset iteration
	Consideration of timezones
	Timeouts
	Retries
	Connection pool
	Prepared statements: being able to specify how many rows to fetch from server (use cursors)
	Types
		Decimal
		Bit
		Geometry
	connection::run_sql that hides the resultset concept
    Option for separate compilation
Other possible features
    CLIENT_SESSION_TRACK
    CLIENT_OPTIONAL_RESULTSET_METADATA
    Lower C++ std requirements
    Status flags accessors in resultset (for OK_Packet)
Technical debt
    Change channel read to make less syscalls
	Test dashboard
	Sanitizers
	Integ tests for different default auth plugins
	Integ tests for not enough capabilities
	Integ tests for ssl_mode::enable and SSL not available
	Review convention in test names
	Review named_param
	Take fetch_many() algorithm out into network_algorithms (e.g. read_many_rows)
	Concept checking for StreamType
	See if we can drop the dependence on beast
	Review valid() for moved-from resultsets (should it return always true?)
	Force the same number of values in each row as in fields()
	CMake exporting?
	Rework deserialize_row_fn to allow cursors
	Test prepared statement binding to procedure out params
	More thorough testing for several NULLs in integration testing
	Query and statement tests for DELETEs
	prepared_statement::execute(): static_assert(), handle value&, const value&, anything convertible
	Test for too many connections
	Use a proper float endianness reverse
    Executor tests?