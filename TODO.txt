Better docs
	Breaking up the tutorial in pieces
	Explaining the different overloads and async methods available
	Try to include Readme instead of copying it
	BoostBook
	Automate the process
	Make undocumented enum values show (for collation)
Multiresultset
	Text protocol
	Binary protocol (stored procedures)
Handshake
	compression
	SSL certificate & common name validation
	sha256_password
Usability
	Should make_error_code be public?
	Connection quit
	Incomplete query reads: how does this affect further queries?
	Metadata in rows: being able to index by name
	Iterators for sync resultset iteration
	Consideration of timezones
	Timeouts
	Retries
	Connection pool
	Prepared statements: being able to specify how many rows to fetch from server (use cursors)
	Types
		Decimal
		Bit
		Geometry
	connection::connect that handles TCP/Unix and MySQL connect
	connection::run_sql that hides the resultset concept
Consider if header-only is a good idea
Technical debt
	Bad serialize(value.value) somewhere
	Valgrindize
	Integ tests for different default auth plugins
	Integ tests for not enough capabilities
	Integ tests for ssl_mode::enable and SSL not available
	Review convention in test names
	Review named_param
	Copy operations for handshake
	Review handshake auth_plugin_data - seems like buffer overrun is possible (auth data string_lenenc?)
	Take fetch_many() algorithm out into network_algorithms (e.g. read_many_rows)
	clear_errors() function to clear error_info and error_code at once
	Concept checking for StreamType
	Review async initiations
		See if async_initiate is applicable
		See if we can drop the dependence on beast
	Review close() of the stream on error
	Review valid() for moved-from resultsets (should it return always true?)
	Force the same number of values in each row as in fields()
	CMake exporting?
	Integration test for network errors (e.g. host unreachable)
	Test zero dates
	Rework deserialize_row_fn to allow cursors
	Test prepared statement binding to procedure out params
	More thorough testing for several NULLs in integration testing
	Query and statement tests for DELETEs
	prepared_statement::execute(): static_assert(), handle value&, const value&, anything convertible
	Test for too many connections: do we have a buffer overrun there? (error msg shows incomplete)